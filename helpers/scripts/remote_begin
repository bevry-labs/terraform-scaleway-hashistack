#!/usr/bin/env bash
set -ueE -o pipefail
cd "$(dirname "$0")"

echo '<remote_begin>'

# Variables
type="$(cat ../data/input/type)"
consul_type="$(cat ../data/input/consul_type)"
vault_type="$(cat ../data/input/vault_type)"
docker_type="$(cat ../data/input/docker_type)"
nomad_type="$(cat ../data/input/nomad_type)"
tls_mode="$(cat ../data/input/tls_mode)"

# Prepare
mkdir -p \
	../data/input \
	../data/local/conf \
	../data/output/cert \
	../data/output/vault \
	../data/output/auth \
	/etc/certs

echo "Installing dependencies..."
sudo yum update -y
if ! ./command_exists unzip; then
	sudo yum install -y unzip
fi
# sudo yum install -y net-tools # ifconfig
# sudo yum install -y bind-tools # dig

# As JQ does not exist for arm64, use node and json
# https://github.com/stedolan/jq/issues/1655
# https://github.com/trentm/json
if ! ./command_exists node; then
	sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
	sudo yum install -y nodejs --enablerepo=epel
fi
if ! ./command_exists json; then
	sudo npm install -g json
fi

if test "$tls_mode" = "cloudflared"; then
	# this may or may not work due to
	# https://github.com/cloudflare/cloudflared/issues/22
	# https://github.com/cloudflare/cloudflared/issues/25
	sudo yum install -y git

	# install go manually, as yum has older version
	# https://golang.org/doc/install
	go_version='1.10.1'
	go_arch='arm64'
	go_url="https://dl.google.com/go/go${go_version}.linux-${go_arch}.tar.gz"
	go_file="$(mktemp -d)/go$VERSION.$OS-$ARCH.tar.gz"
	./download "$go_url" "$go_file"
	tar -C /usr/local -xzf "$go_file"
	export PATH=$PATH:/usr/local/go/bin
	shred "$go_file"

	# install cloudflared
	sudo go install -v github.com/cloudflare/cloudflared/cmd/cloudflared
fi

# End of base
if test "$type" = "base"; then
	exit 0
fi

if test "$tls_mode" = "local"; then
	if ! ./is_empty_dir ../data/shared/cert; then
		cp -v ../data/shared/cert/* /etc/certs
	fi
fi

echo "Configuring ports..."
# https://github.com/bevry/terraform-scaleway-hashistack/issues/11
# @todo not sure if this is necessary when using cloudflared
tr ',' '\n' < ../data/input/ports_local_tcp | while read -r port || [ -n "$port" ]; do
	echo "configuring local $port/tcp"
	sudo firewall-cmd --zone=public --add-port="$port/tcp" --permanent
done
tr ',' '\n' < ../data/input/ports_local_udp | while read -r port || [ -n "$port" ]; do
	echo "configuring local $port/udp"
	sudo firewall-cmd --zone=public --add-port="$port/udp" --permanent
done
sudo firewall-cmd --reload

echo "Configuring services as $type..."

if test -n "$consul_type"; then
	echo "Configuring consul as $consul_type..."
	./consul
fi

if test -n "$vault_type"; then
	echo "Configuring vault as $vault_type..."
	./vault
fi

if test -n "$docker_type"; then
	echo "Configuring docker as $docker_type..."
	./docker
fi

if test -n "$nomad_type"; then
	echo "Configuring nomad as $nomad_type..."
	./nomad
fi

if test "$tls_mode" = "local"; then
	echo "Enabling Local TLS via Vault PKI..."
	./tls_local_enable
elif test "$tls_mode" = "cloudflared"; then
	echo 'Enabling TLS via Cloudflare Argo Tunnel (cloudflared)...'
	./tls_cloudflared_enable
fi

echo '</remote_begin>'
