#!/usr/bin/env bash

echo '<vault_env>'

if test "${BASH_SOURCE[0]}" = "${0}"; then
	echo "${BASH_SOURCE[0]} must be sourced"
	exit 1
fi

# Variables
private_ip="$(cat ../data/input/private_ip)"
vault_type="$(cat ../data/input/vault_type)"
if test "$vault_type" = "origin"; then
	vault_hostname="$private_ip"
else
	vault_hostname='vault.service.consul'
fi

# Exports
export VAULT_CLI_NO_COLOR=true

# Configure vault CLI to access the vault server
if test -f /etc/certs/vault.key; then
	# https://www.vaultproject.io/docs/commands/index.html#environment-variables
	export VAULT_ADDR="https://${vault_hostname}:8200"
	export VAULT_CACERT=/etc/certs/vault.ca
	export VAULT_CLIENT_CERT=/etc/certs/vault.crt
	export VAULT_CLIENT_KEY=/etc/certs/vault.key
	# VAULT_TLS_SERVER_NAME
else
	export VAULT_ADDR="http://${vault_hostname}:8200"
fi

# Update the vault token
if test -f ../data/shared/auth/cluster_token; then
	echo 'using shared cluster_token'
	cluster_token="$(cat ../data/shared/auth/cluster_token)"
	export VAULT_TOKEN="$cluster_token"
elif test -f ../data/output/auth/cluster_token; then
	echo 'using cluster_token'
	cluster_token="$(cat ../data/output/auth/cluster_token)"
	export VAULT_TOKEN="$cluster_token"
elif test -f ../data/output/auth/root_token; then
	echo 'using root_token'
	root_token="$(cat ../data/output/auth/root_token)"
	export VAULT_TOKEN="$root_token"
fi

echo '</vault_env>'
