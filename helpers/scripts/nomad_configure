#!/usr/bin/env bash
set -ueE -o pipefail
cd "$(dirname "$0")"

echo ''
echo '<nomad_configure>'
echo ''

# Variables
user="$(cat ../data/input/nomad_user)"
group="$(cat ../data/input/nomad_group)"
nomad_type="$(cat ../data/input/nomad_type)"
nomad_expect="$(cat ../data/input/nomad_expect)"
private_ip="$(cat ../data/input/private_ip)"
region="$(cat ../data/input/region)"

# Shared
nomad_token="$(cat ../data/shared/auth/nomad_token)"

# Outputs
if test -f ../data/shared/auth/nomad_gossip_key; then
	nomad_gossip_key="$(cat ../data/shared/auth/nomad_gossip_key)"
else
	openssl rand -base64 16 > ../data/output/auth/nomad_gossip_key
	nomad_gossip_key="$(cat ../data/output/auth/nomad_gossip_key)"
fi

# https://www.nomadproject.io/docs/agent/configuration/index.html
# https://www.nomadproject.io/guides/cluster/automatic.html
# https://www.nomadproject.io/docs/agent/configuration/consul.html
# https://www.nomadproject.io/docs/vault-integration/index.html
# "bootstrap_expect": $nomad_expect,
echo "Writing nomad configuration..."
cat > ../data/local/conf/nomad.conf <<EOF
[Unit]
Description=nomad agent
Requires=network-online.target
After=network-online.target

[Service]
Restart=on-failure
EnvironmentFile=-/etc/sysconfig/nomad
ExecStart=/usr/local/bin/nomad agent -config=/etc/systemd/system/nomad.d
ExecReload=/bin/kill -HUP \$MAINPID
KillSignal=SIGTERM
User=${user}
Group=${group}

[Install]
WantedBy=multi-user.target
EOF

# BASE
cat > ../data/local/conf/nomad_base.json <<EOF
{
	"encrypt": "${nomad_gossip_key}",
	"data_dir": "/opt/nomad/data",
	"consul": {},
	"vault": {
		"enabled": true,
		"create_from_role": "nomad-cluster",
		"token": "${nomad_token}",
		"address": "http://vault.service.consul:8200"
	},
	"bind_addr": "${private_ip}",
	"region": "${region}"
}
EOF

# TLS
# https://www.nomadproject.io/docs/agent/configuration/consul.html
# https://www.nomadproject.io/docs/agent/configuration/vault.html
# @todo look into tls_server_name, allow_unauthenticated, create_from_role
# https://www.nomadproject.io/docs/agent/configuration/tls.html
# https://www.nomadproject.io/guides/securing-nomad.html
cat > ../data/local/conf/nomad_tls.json <<EOF
{
	"consul": {
		"ssl": true,
		"verify_ssl": true,
		"ca_file": "/etc/certs/consul.ca",
		"cert_file": "/etc/certs/consul.crt",
		"key_file": "/etc/certs/consul.key"
	},
	"vault": {
		"enabled": true,
		"create_from_role": "nomad-cluster",
		"token": "${nomad_token}",
		"address": "https://vault.service.consul:8200",
		"ca_file": "/etc/certs/vault.ca",
		"cert_file": "/etc/certs/vault.crt",
		"key_file": "/etc/certs/vault.key",
		"tls_skip_verify": false
	},
	"tls": {
		"http": true,
		"rpc": true,
		"ca_file": "/etc/certs/nomad_server.ca",
		"cert_file": "/etc/certs/nomad_server.crt",
		"key_file": "/etc/certs/nomad_server.key",
		"verify_https_client": true,
		"verify_server_hostname": true
	}
}
EOF


# MASTER
cat > ../data/local/conf/nomad_master.json <<EOF
{
	"server": {
		"enabled": true,
		"bootstrap_expect": ${nomad_expect}
	}
}
EOF

# SLAVE
cat > ../data/local/conf/nomad_slave.json <<EOF
{}
EOF

# MASTER TLS
cat > ../data/local/conf/nomad_master_tls.json <<EOF
{}
EOF

# SLAVE TLS
cat > ../data/local/conf/nomad_slave_tls.json <<EOF
{
	"tls": {
		"http": true,
		"rpc": true,
		"ca_file": "/etc/certs/nomad_client.ca",
		"cert_file": "/etc/certs/nomad_client.crt",
		"key_file": "/etc/certs/nomad_client.key",
		"verify_https_client": true,
		"verify_server_hostname": true
	}
}
EOF

# Merge
if test -f /etc/certs/nomad_server.key; then
	echo 'Configuring Nomad for TLS...'
	./json_merge \
		../data/local/conf/nomad_base.json \
		../data/local/conf/nomad_tls.json \
		"../data/local/conf/nomad_${nomad_type}.json" \
		"../data/local/conf/nomad_${nomad_type}_tls.json" > ../data/local/conf/nomad.json
else
	echo 'Configuring Nomad without TLS...'
	./json_merge \
		../data/local/conf/nomad_base.json \
		"../data/local/conf/nomad_${nomad_type}.json" > ../data/local/conf/nomad.json
fi

# Merge
if test -f /etc/certs/nomad_server.key; then
	export NOMAD_CACERT=/etc/certs/ca.pem
	export NOMAD_CLIENT_CERT=/etc/certs/nomad_cli.crt
	export NOMAD_CLIENT_KEY=/etc/certs/nomad_cli.key
	./json_merge \
		./data/local/nomad_base.json \
		../data/local/conf/nomad_tls.json \
		"../data/local/conf/nomad_${nomad_type}.json" > ../data/local/conf/nomad.json
else
	./json_merge \
		../data/local/conf/nomad_base.json \
		"../data/local/conf/nomad_${nomad_type}.json" > ../data/local/conf/nomad.json
fi


# if vault.service.consul does not work, change it to
# http://127.0.0.1:8200

echo ''
echo '<nomad_configure>'
echo ''
