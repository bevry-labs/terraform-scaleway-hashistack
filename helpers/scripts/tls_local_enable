#!/usr/bin/env bash
set -ueE -o pipefail
cd "$(dirname "$0")"

echo '<tls_enable>'

# Variables
consul_type="$(cat ../data/input/consul_type)"
vault_type="$(cat ../data/input/vault_type)"
loopback_ip="$(cat ../data/input/loopback_ip)"
private_ip="$(cat ../data/input/private_ip)"
public_ip="$(cat ../data/input/public_ip)"
hostname="$(cat ../data/input/hostname)"

# -------------------------------------
# Vault Access

if ! ./command_exists vault; then
	./service_install vault
fi
source ./vault_env


# -------------------------------------
# Consul

if test "$consul_type" = "origin"; then
	echo 'Generating TLS for consul...'
	vault write -format=json pki_int/issue/host common_name="consul.$hostname" alt_names="consul.service.consul,server.global.consul" ip_sans="${private_ip},${loopback_ip},${public_ip}" > ../data/output/vault/pki_int_consul.json
	json data.private_key < ../data/output/vault/pki_int_consul.json > ../data/output/cert/consul.key
	json data.certificate < ../data/output/vault/pki_int_consul.json > ../data/output/cert/consul.crt
	json data.issuing_ca < ../data/output/vault/pki_int_consul.json > ../data/output/cert/consul.ca
	cp -v ../data/output/cert/vault* /etc/certs

	echo 'Configuring TLS for consul...'
	./service_configure consul

	echo 'Checking consul...'
	source ./consul_env
	consul info
fi


# -------------------------------------
# Vault

if test "$vault_type" = "origin"; then
	echo 'Generating TLS for vault...'
	vault write -format=json pki_int/issue/host common_name="vault.$hostname" alt_names="vault.service.consul,server.global.vault" ip_sans="${private_ip},${loopback_ip},${public_ip}" > ../data/output/vault/pki_int_vault.json
	json data.private_key < ../data/output/vault/pki_int_vault.json > ../data/output/cert/vault.key
	json data.certificate < ../data/output/vault/pki_int_vault.json > ../data/output/cert/vault.crt
	json data.issuing_ca < ../data/output/vault/pki_int_vault.json > ../data/output/cert/vault.ca
	cp -v ../data/output/cert/vault* /etc/certs

	echo 'Configuring TLS for vault...'
	./service_configure vault

	echo 'Reunsealing Vault...'
	./vault_unseal

	echo 'Checking vault...'
	source ./vault_env
	vault status
fi


# -------------------------------------
# Nomad

# not yet supported
# https://github.com/bevry/terraform-scaleway-hashistack/issues/12

# if test "$nomad_type" = "master"; then
# 	vault write -format=json pki_int/issue/host common_name="server.nomad.$hostname" alt_names="server.global.nomad" ip_sans="${private_ip},${loopback_ip},${public_ip}" > ../data/output/vault/pki_int_nomad.json
# 	json data.private_key < ../data/output/vault/pki_int_nomad.json > ../data/output/cert/nomad.key
# 	json data.certificate < ../data/output/vault/pki_int_nomad.json > ../data/output/cert/nomad.crt
# 	json data.issuing_ca < ../data/output/vault/pki_int_nomad.json > ../data/output/cert/nomad.ca

# 	echo 'Configuring TLS for nomad...'
# 	./service_configure nomad

# 	echo 'Checking nomad...'
# 	source ./nomad_env
# 	nomad status

# elif test "$nomad_type" = "slave"; then
# 	vault write -format=json pki_int/issue/host common_name="client.nomad.$hostname" alt_names="client.global.nomad" ip_sans="${private_ip},${loopback_ip},${public_ip}" > ../data/output/vault/pki_int_nomad.json
# 	json data.private_key < ../data/output/vault/pki_int_nomad.json > ../data/output/cert/nomad.key
# 	json data.certificate < ../data/output/vault/pki_int_nomad.json > ../data/output/cert/nomad.crt
# 	json data.issuing_ca < ../data/output/vault/pki_int_nomad.json > ../data/output/cert/nomad.ca

# 	echo 'Configuring TLS for nomad...'
# 	./service_configure nomad

# 	echo 'Checking nomad...'
# 	source ./nomad_env
# 	nomad status
# fi

echo '</tls_enable>'