#!/usr/bin/env bash
set -ueE -o pipefail
cd "$(dirname "$0")"

# Clean
function finish {
	./shred "$temp"
}
trap finish EXIT

# Locals
service="$1"
version="$2"
platform="linux_arm64"

# Files
temp="$(mktemp -d)"

# Download ZIP
zip_filename="${service}_${version}_${platform}.zip"
zip_url="https://releases.hashicorp.com/${service}/${version}/${service}_${version}_${platform}.zip"
zip_file="$temp/$service.zip"
./download "$zip_url" "$zip_file"

# Download Signature
sig_url="https://releases.hashicorp.com/${service}/${version}/${service}_${version}_SHA256SUMS.sig"
sig_file="$temp/$service.sig"
./download "$sig_url" "$sig_file"

# Download Hashes
sha_url="https://releases.hashicorp.com/${service}/${version}/${service}_${version}_SHA256SUMS"
sha_file="$temp/$service.sha"
./download "$sha_url" "$sha_file"

# Verify Signature with GPG
key_url="https://keybase.io/hashicorp/pgp_keys.asc"
key_file="$temp/hashicorp.asc"
./download "$key_url" "$key_file"
gpg --import "$key_file"
gpg --verify "$sig_file" "$sha_file"

# Verify Signature with Keybase
if ./command_exists keybase; then
	keybase pgp verify -d "$sig_file" -S hashicorp -i "$sha_file"
fi

# Verify Zip
sha_expected="$(grep "$zip_filename" < "$sha_file" | sed 's/ .*//')"
sha_actual="$(./sigsum "$zip_file" | sed 's/ .*//')"
if test "$sha_expected" = "$sha_actual"; then
	echo "zip file hash matched"
else
	echo "zip file hash did not match!"
	echo "expected hash: $sha_expected"
	echo "actual hash:   $sha_actual"
	exit 1
fi

# Move zip to file
mv "$zip_file" "../files/$service.zip"
